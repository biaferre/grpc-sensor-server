// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sensor.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sensor_GetSensorData_FullMethodName = "/Sensor/GetSensorData"
)

// SensorClient is the client API for Sensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorClient interface {
	GetSensorData(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*SensorResponse, error)
}

type sensorClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorClient(cc grpc.ClientConnInterface) SensorClient {
	return &sensorClient{cc}
}

func (c *sensorClient) GetSensorData(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*SensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensorResponse)
	err := c.cc.Invoke(ctx, Sensor_GetSensorData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorServer is the server API for Sensor service.
// All implementations must embed UnimplementedSensorServer
// for forward compatibility.
type SensorServer interface {
	GetSensorData(context.Context, *SensorRequest) (*SensorResponse, error)
	mustEmbedUnimplementedSensorServer()
}

// UnimplementedSensorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSensorServer struct{}

func (UnimplementedSensorServer) GetSensorData(context.Context, *SensorRequest) (*SensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorData not implemented")
}
func (UnimplementedSensorServer) mustEmbedUnimplementedSensorServer() {}
func (UnimplementedSensorServer) testEmbeddedByValue()                {}

// UnsafeSensorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServer will
// result in compilation errors.
type UnsafeSensorServer interface {
	mustEmbedUnimplementedSensorServer()
}

func RegisterSensorServer(s grpc.ServiceRegistrar, srv SensorServer) {
	// If the following call pancis, it indicates UnimplementedSensorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sensor_ServiceDesc, srv)
}

func _Sensor_GetSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServer).GetSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sensor_GetSensorData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServer).GetSensorData(ctx, req.(*SensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sensor_ServiceDesc is the grpc.ServiceDesc for Sensor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sensor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sensor",
	HandlerType: (*SensorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensorData",
			Handler:    _Sensor_GetSensorData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sensor.proto",
}
